#| Copyright 2008 Google Inc. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License")
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an AS IS BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Author: madscience@google.com (Moshe Looks) 

numerical functions |#
(in-package :plop)

;;; gaussian sampling
(flet ((box-muller ()
	 "Based on code at http://www.taygeta.com/random/gaussian.html"
	 (loop
	    for x1 = (1- (* 2.0d0 (random 1d0)))
	    for x2 = (1- (* 2.0d0 (random 1d0)))
	    for w = (+ (* x1 x1) (* x2 x2))
	    while (>= w 1d0)
	    finally
	    (let ((w (sqrt (/ (* -2d0 (log w)) w))))
	      (return (values (* x1 w) (* x2 w)))))))
  (defun random-normal (&optional (mean 0.0) (sd 1.0))
    (+ (* (box-muller) sd) mean)))

;;; histogram
(defun hist (elems &optional (nbins (min (ceiling (/ (length elems) 10)) 20))
	     &aux (bins (make-array nbins :initial-element 0))
	     (min (min-element elems #'<)) (max (max-element elems #'<))
	     (width (/ (- max min) nbins)))
  (mapc (lambda (x)
	  (incf (elt bins (min (1- nbins) (floor (/ (- x min) width)))))) 
	elems)
  bins)

;;; erf = the gaussian error function
;;; this is a bit ugly, but I'm not sure what would be a better way
;;; to do it...
(let ((fn (cond ((fboundp 'cl-user::erf)
		 (symbol-function (find-symbol "ERF" (find-package 'cl-user))))
		((find-package 'maxima)
		 (symbol-function (find-symbol "ERF" (find-package 'maxima))))
		(t (let ((table (make-array 
				 300 :initial-contents
 '(0.0d0 0.011283415555849618d0 0.022564574691844943d0
   0.03384122234173543d0 0.04511110614512475d0 0.05637197779701662d0
   0.06762159439330843d0 0.07885771977089075d0 0.09007812584101817d0
   0.10128059391462688d0 0.1124629160182849d0 0.12362289619947431d0
   0.13475835181992007d0 0.14586711483569575d0 0.15694703306285582d0
   0.1679959714273635d0 0.17901181319810566d0 0.1899924612018088d0
   0.20093583901869577d0 0.21183989215774973d0 0.22270258921047847d0
   0.23352192298210356d0 0.2442959115991287d0 0.2550225995922732d0
   0.265700058953792d0 0.27632639016823696d0 0.28689972321574914d0
   0.2974182185470128d0 0.30788006802903406d0 0.3182834958609522d0
   0.3286267594591274d0 0.33890815031079025d0 0.34912599479558276d0
   0.359278654974359d0 0.36936452934465863d0 0.3793820535623103d0
   0.38932970112866416d0 0.39920598404299923d0 0.409009453419694d0
   0.4187387000697961d0 0.42839235504666845d0 0.4379690901554395d0
   0.4474676184260253d0 0.4568866945495403d0 0.4662251152779575d0
   0.47548171978692366d0 0.4846553900016797d0 0.4937450508860821d0
   0.5027496706947648d0 0.511668261188523d0 0.5204998778130465d0
   0.5292436198411704d0 0.5378986304788544d0 0.5464640969351418d0
   0.5549392504563903d0 0.563323366325109d0 0.5716157638237684d0
   0.579815806163996d0 0.5879229003816007d0 0.5959364971979085d0
   0.6038560908479259d0 0.6116812188758802d0 0.6194114618987212d0
   0.6270464433381957d0 0.6345858291221413d0 0.6420293273556719d0
   0.6493766879629542d0 0.6566277023003051d0 0.663782202741358d0
   0.6708400622350777d0 0.6778011938374184d0 0.6846655502174442d0
   0.6914331231387512d0 0.6981039429170445d0 0.7046780778547458d0
   0.7111556336535151d0 0.7175367528055908d0 0.7238216139648593d0
   0.7300104312985789d0 0.7361034538206911d0 0.7421009647076605d0
   0.7480032805977895d0 0.7538107508749625d0 0.759523756937773d0
   0.7651427114549946d0 0.7706680576083526d0 0.7761002683235567d0
   0.7814398454905507d0 0.7866873191739325d0 0.7918432468144954d0
   0.7969082124228322d0 0.8018828257659413d0 0.8067677215477617d0
   0.8115635585845578d0 0.8162710189760625d0 0.8208908072732779d0
   0.8254236496438182d0 0.8298702930356671d0 0.8342315043402079d0
   0.8385080695553698d0 0.8427007929497149d0 0.8468104962282768d0
   0.850838017700942d0 0.8547842114541484d0 0.8586499465266515d0
   0.8624361060900967d0 0.8661435866351082d0 0.8697732971635866d0
   0.8733261583878896d0 0.8768031019375383d0 0.8802050695740817d0
   0.883533012414718d0 0.8867878901652547d0 0.8899706703629623d0
   0.8930823276298567d0 0.8961238429369149d0 0.899096202879712d0
   0.9020003989659356d0 0.9048374269152168d0 0.907608285971685d0
   0.9103139782296353d0 0.9129555079726694d0 0.9155338810266468d0
   0.9180501041267614d0 0.9205051842990297d0 0.9229001282564582d0
   0.9252359418101295d0 0.9275136292954247d0 0.9297341930135782d0
   0.9318986326887336d0 0.9340079449406524d0 0.9360631227731995d0
   0.9380651550787114d0 0.9400150261583302d0 0.9419137152583653d0
   0.943762196122724d0 0.9455614365614331d0 0.947312398035252d0
   0.9490160352563626d0 0.9506732958050964d0 0.9522851197626488d0
   0.9538524393597054d0 0.9553761786408962d0 0.9568572531449688d0
   0.9582965696005648d0 0.9596950256374592d0 0.961053509513118d0
   0.9623728998544058d0 0.9636540654142689d0 0.9648978648432042d0
   0.9661051464753108d0 0.9672767481287117d0 0.9684134969201231d0
   0.9695162090933357d0 0.9705856898613637d0 0.9716227332620125d0
   0.9726281220266002d0 0.9736026274615671d0 0.9745470093426969d0
   0.9754620158216677d0 0.976348383344644d0 0.9772068365826186d0
   0.9780380883732035d0 0.9788428396735701d0 0.979621779524232d0
   0.9803755850233603d0 0.9811049213113221d0 0.9818104415651265d0
   0.9824927870024648d0 0.9831525868950262d0 0.9837904585907745d0
   0.9844070075448683d0 0.9850028273589058d0 0.9855784998281805d0
   0.9861345949966329d0 0.9866716712191824d0 0.9871902752311301d0
   0.9876909422243223d0 0.9881741959297683d0 0.9886405487064082d0
   0.9890905016357308d0 0.9895245446219444d0 0.9899431564974076d0
   0.9903468051330306d0 0.9907359475533626d0 0.9911110300560857d0
   0.9914724883356396d0 0.9918207476107067d0 0.9921562227552937d0
   0.992479318433148d0 0.9927904292352575d0 0.9930899398201835d0
   0.9933782250569848d0 0.9936556501704964d0 0.9939225708887325d0
   0.9941793335921891d0 0.9944262754648279d0 0.9946637246465299d0
   0.9948920003868136d0 0.995111413199617d0 0.9953222650189527d0
   0.9955248493552482d0 0.995719451452192d0 0.995906348443912d0
   0.9960858095123195d0 0.9962580960444569d0 0.996423461789696d0
   0.9965821530166384d0 0.9967344086695764d0 0.9968804605243777d0
   0.997020533343667d0 0.9971548450311778d0 0.9972836067851606d0
   0.9974070232507334d0 0.9975252926710697d0 0.9976386070373253d0
   0.9977471522372077d0 0.9978511082021002d0 0.9979506490526588d0
   0.9980459432428015d0 0.9981371537020182d0 0.9982244379759344d0
   0.9983079483650648d0 0.9983878320616982d0 0.9984642312848625d0
   0.9985372834133188d0 0.9986071211165418d0 0.9986738724836454d0
   0.998737661150219d0 0.9987986064230412d0 0.9988568234026434d0
   0.9989124231037001d0 0.998965512573224d0 0.9990161950065498d0
   0.9990645698610919d0 0.9991107329678676d0 0.9991547766407751d0
   0.9991967897836264d0 0.9992368579949287d0 0.9992750636704192d0
   0.999311486103355d0 0.9993462015825646d0 0.9993792834882711d0
   0.9994108023856942d0 0.9994408261164486d0 0.999469419887749d0
   0.999496646359442d0 0.9995225657288812d0 0.9995472358136659d0
   0.9995707121322661d0 0.999593047982555d0 0.9996142945182758d0
   0.9996345008234653d0 0.9996537139848648d0 0.9996719791623431d0
   0.9996893396573608d0 0.9997058369795081d0 0.9997215109111428d0
   0.9997363995701628d0 0.9997505394709432d0 0.9997639655834707d0
   0.9997767113907082d0 0.9997888089442238d0 0.9998002889181156d0
   0.9998111806612685d0 0.999821512247976d0 0.9998313105269613d0
   0.9998406011688324d0 0.9998494087120056d0 0.9998577566071316d0
   0.9998656672600594d0 0.9998731620733717d0 0.9998802614865254d0
   0.9998869850146334d0 0.9998933512859194d0 0.9998993780778803d0
   0.9999050823521899d0 0.9999104802883753d0 0.9999155873163016d0
   0.9999204181474947d0 0.9999249868053346d0 0.9999293066541523d0
   0.9999333904272599d0 0.9999372502539452d0 0.999940897685461d0
   0.9999443437200386d0 0.9999475988269556d0 0.9999506729696856d0
   0.9999535756281589d0 0.9999563158201618d0 0.9999589021219005d0
   0.9999613426877595d0 0.9999636452692755d0 0.9999658172333573d0
   0.999967865579774d0 0.9999697969579359d0 0.9999716176829931d0
   0.9999733337512747d0 0.9999749508550908d0 0.9999764743969194d0))))
		     (lambda (x)
		       (if (>= x 3) 1 (elt table (floor (* x 300))))))))))
  (defun erf (x) (funcall fn x)))

;;; E(X|X>x) for gaussian var X with mean m and variance v
(let ((sqrt2 (sqrt 2.0L0))
      (sqrt2-over-pi (sqrt (/ 2.0L0 pi))))
  (defun conditional-tail-expectation (m v x &aux d sd erf)
    (setf m (coerce m 'long-float)
	  v (coerce v 'long-float)
	  x (coerce x 'long-float)
	  d (- x m)
	  sd (sqrt v)
	  erf (coerce (erf (/ d (* sd sqrt2))) 'long-float))
    (assert (<= erf 0.9999999999974403808L0) ()
	    "can't compute cte due to numerical instability; (erf ~S) = ~S"
	    (/ d (* sd sqrt2)) erf)
    (+ m (/ (* sd sqrt2-over-pi (exp (/ (* d d) (* -2.0L0 v))))
	    (- 1.0L0 erf))))
  (defun normal-cdf (m v x)
    (setf m (coerce m 'long-float)
	  v (coerce v 'long-float)
	  x (coerce x 'long-float))
    (+ 0.5L0  (* 0.5L0 (erf (/ (- x m) (* (sqrt v) sqrt2)))))))
(define-test conditional-tail-expectation
  ;; ensure that we are at least somewhat stable
  (let* ((values (iota 6.97 :start 6 :step 0.01))
	 (l (mapcar (lambda (x) 
		     (- (conditional-tail-expectation 0.0L0 1.0L0 x) x))
		    values)))
    (mapcar (lambda (x y) 
	      (assert-true (> x y) x y 
			   (nth (position x l) values)
			   (nth (position y l) values)))
	    l (cdr l))))
(define-test normal-cdf
  (assert-equal 0.5 (normal-cdf 0 1 0))
  (assert-true (< 0.99 (normal-cdf 0 1 100)))
  (assert-true (> 0.01 (normal-cdf 0 1 -100))))
